### Get lyrics and chords for a song
POST {{localUrl}}/api/ai/get-song-lyrics-chords
Authorization: Bearer 1234
Content-Type: application/json

{
  "title": "Radioactive",
  "artist": "Imagine Dragons"
}

@localUrl = http://localhost:5000
@baseUrl = https://be-tan-theta.vercel.app

### Get translation for text
POST {{localUrl}}/api/ai/translate
Authorization: Bearer 1234
Content-Type: application/json

{
  "text": "Casseroles",
  "targetLanguage": "he"
}

###

### Create picture from text
POST {{localUrl}}/api/ai/image
Authorization: Bearer 1234
Content-Type: application/json

{
  "text": "flowers in a field"
}

### Create text for recipe from title
POST {{localUrl}}/api/ai/fill-recipe
Authorization: Bearer 1234
Content-Type: application/json

{
  "recipeId": "6824b89071230ea2707f2280",
  "categoryName": "Pizzas",
  "targetLanguage": "en"
}

### Get song list by title (OpenAI only)
POST {{localUrl}}/api/ai/get-song-list
Authorization: Bearer 1234
Content-Type: application/json

{
  "title": "Radioactive"
}

### Get song list from YouTube by title
POST {{localUrl}}/api/ai/get-youtube-song-list
Authorization: Bearer 1234
Content-Type: application/json

{
  "title": "Radioactive"
}

### Get song list by artist (OpenAI only)
POST {{localUrl}}/api/ai/get-song-list
Authorization: Bearer 1234
Content-Type: application/json

{
  "artist": "Sia"
}

### Get song list from YouTube by artist
POST {{localUrl}}/api/ai/get-youtube-song-list
Authorization: Bearer 1234
Content-Type: application/json

{
  "artist": "Sia"
}

### Get song list by genre (OpenAI only)
POST {{localUrl}}/api/ai/get-song-list
Authorization: Bearer 1234
Content-Type: application/json

{
  "genre": "pop"
}

### Get song list from YouTube by genre
POST {{localUrl}}/api/ai/get-youtube-song-list
Authorization: Bearer 1234
Content-Type: application/json

{
  "genre": "pop"
}

### Get song list by title and artist
POST {{localUrl}}/api/ai/get-song-list
Authorization: Bearer 1234
Content-Type: application/json

{
  "artist": "Shlomo Artzi"
}

### Get SRT lyrics for a song
POST {{localUrl}}/api/ai/get-song-lyrics-srt
Authorization: Bearer 1234
Content-Type: application/json

{
  "title": "drao",
  "artist": "gilberto gil"
}

### Get chords for a song
POST {{localUrl}}/api/ai/get-song-lyrics-chords
Authorization: Bearer 1234
Content-Type: application/json

{
  "title": "Let It Be",
  "artist": "The Beatles"
}

### Get playlist list from YouTube via AI routes
POST {{localUrl}}/api/ai/get-playlist-list
Authorization: Bearer 1234
Content-Type: application/json

{
  "q": "rock classics"
}

### Get songs from a specific YouTube playlist by ID via AI routes (first 10 songs)
POST {{localUrl}}/api/ai/get-playlist-songs
Authorization: Bearer 1234
Content-Type: application/json

{
  "playlistId": "PLrAd2F5wF_gLgGfKZrflhkhUqjVYN8_qI"
}

### Get songs from a specific YouTube playlist by ID via AI routes with pagination
POST {{localUrl}}/api/ai/get-playlist-songs
Authorization: Bearer 1234
Content-Type: application/json

{
  "playlistId": "PLrAd2F5wF_gLgGfKZrflhkhUqjVYN8_qI",
  "skip": 10,
  "limit": 20
}

### Get first 10 words of a song's lyrics via AI routes
POST {{localUrl}}/api/ai/get-song-10-words
Authorization: Bearer 1234
Content-Type: application/json

{
  "artist": "Imagine Dragons",
  "title": "Believer"
}

### Get a React multiple-choice question
POST {{localUrl}}/api/ai/react-questionaire
Authorization: Bearer 1234
Content-Type: application/json

{}

### Get a custom number of React multiple-choice questions
POST {{localUrl}}/api/ai/react-questionaire
Authorization: Bearer 1234
Content-Type: application/json

{
  "numberOfQuestions": 10,
  "numberOfPossibleAnswers": 4
}

### Get React questions avoiding previously asked ones
POST {{localUrl}}/api/ai/react-questionaire
Authorization: Bearer 1234
Content-Type: application/json

{
  "numberOfQuestions": 5,
  "numberOfPossibleAnswers": 4,
  "oldQs": [
    {
      "q": "What is the purpose of the useEffect hook?",
      "answers": [
        {
          "text": "To manage component state",
          "correct": false
        },
        {
          "text": "To perform side effects in function components",
          "correct": true
        },
        {
          "text": "To optimize rendering performance",
          "correct": false
        },
        {
          "text": "To handle user input",
          "correct": false
        }
      ],
      "explanation": "The useEffect hook is used to perform side effects in function components, such as data fetching or subscriptions."
    },
    {
      "q": "What is a controlled component in React?",
      "answers": [
        {
          "text": "A component that manages its own state",
          "correct": false
        },
        {
          "text": "A component that receives its value from props and notifies changes",
          "correct": true
        },
        {
          "text": "A component that does not re-render on state changes",
          "correct": false
        },
        {
          "text": "A component that uses the Context API",
          "correct": false
        }
      ],
      "explanation": "A controlled component is one that receives its value from props and notifies changes, making it controlled by React."
    },
    {
      "q": "What is prop drilling in React?",
      "answers": [
        {
          "text": "Passing props from parent to child components",
          "correct": true
        },
        {
          "text": "Using the Context API to avoid passing props",
          "correct": false
        },
        {
          "text": "Managing state across multiple components",
          "correct": false
        },
        {
          "text": "Creating components without props",
          "correct": false
        }
      ],
      "explanation": "Prop drilling refers to the process of passing props from a parent component down to child components, which can become cumbersome."
    },
    {
      "q": "How can you prevent the default action of an event in a React component?",
      "answers": [
        {
          "text": "By calling event.preventDefault()",
          "correct": true
        },
        {
          "text": "By returning false from the event handler",
          "correct": false
        },
        {
          "text": "By using a ref",
          "correct": false
        },
        {
          "text": "By using useEffect",
          "correct": false
        }
      ],
      "explanation": "You can prevent the default action of an event by calling event.preventDefault() within the event handler."
    },
    {
      "q": "Where is the best place to store reusable hooks in a React application?",
      "answers": [
        {
          "text": "In the components folder",
          "correct": false
        },
        {
          "text": "In a hooks folder",
          "correct": true
        },
        {
          "text": "In the same folder as the components that use them",
          "correct": false
        },
        {
          "text": "In the Redux folder",
          "correct": false
        }
      ],
      "explanation": "The best practice is to store reusable hooks in a dedicated 'hooks' folder for better organization."
    },
    {
      "q": "What does React.lazy do?",
      "answers": [
        {
          "text": "It optimizes the rendering of components",
          "correct": false
        },
        {
          "text": "It allows you to dynamically import components",
          "correct": true
        },
        {
          "text": "It manages component state",
          "correct": false
        },
        {
          "text": "It creates a context for components",
          "correct": false
        }
      ],
      "explanation": "React.lazy allows you to dynamically import components, enabling code splitting and optimizing load time."
    }
  ]
}